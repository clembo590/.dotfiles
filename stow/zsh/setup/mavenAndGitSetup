function fromModifiedFilesToParentPomFile() {
  while read myFile; do {
    pomFile=$(find $myFile -maxdepth 1 -type f -name "pom.xml")
    if [[ $pomFile != *pom.xml ]] # * is used for pattern matching
    then
    while [[ $pomFile != *pom.xml ]] ; do
        myFile=$(dirname $myFile)
        pomFile=$(find $myFile -maxdepth 1 -type f -name "pom.xml")
    done
    fi
    echo $pomFile
  }
  done
}

function findParentPomOfModifiedFiles(){
  [ -z "$1" ] && echo "Expected command : findParentPomOfModifiedFiles modificationProvider" && return 0
  localModificationProvider=$1;
  $localModificationProvider | awk -v pwd=$(pwd)/ '{print pwd$1}' | fromModifiedFilesToParentPomFile | sort | uniq
}

function fromPomFileToProject(){
    while read pomFile; do
      pwd=$(pwd)
      pwdSize=$((${#pwd}+2))
      fullPomSize=${#pomFile}
      end=$(($fullPomSize-8))
      result=$( cut -c $pwdSize-$end <<< $pomFile)
      if [ -z "$result" ]
      then
            echo .
      else
            echo $result
      fi
    done
}

function listOfModifiedProjects(){
  [ -z "$1" ] && echo "Expected command : listOfModifiedProjects modificationProvider" && return 0
  localModificationProvider=$1;
  findParentPomOfModifiedFiles $localModificationProvider | fromPomFileToProject | tr '\n' ','
}

myMavenSetVersionPlugin='org.codehaus.mojo:versions-maven-plugin:2.10.0:set'

function mvnVersionPluginSet(){
  $(mvnd --quiet --batch-mode $myMavenSetVersionPlugin -DgenerateBackupPoms=false -DupdateMatchingVersions=false -DprocessFromLocalAggregationRoot=false $@;)
}

function mvnSetSingleProjectVersion(){
  mvnVersionPluginSet -DprocessAllModules=false -DprocessParent=false  $@
}

function mvnSetSingleProjectVersionToRelease(){
  mvnSetSingleProjectVersion -DremoveSnapshot $@
}

function mvnSetSingleProjectVersionToSnapshot(){
  echo settingVersionToSnapshot "$@"
  mvnSetSingleProjectVersion -DnextSnapshot=true $@
}

function mvnSetVersionToSnapshotIfNotInSnapShot(){
  artifactPackingVersion=$(mvnd --quiet --batch-mode $@ -DforceStdout help:evaluate -Dexpression='project.groupId}:${project.artifactId}:${project.packaging}:${project.version'  )
  if [[ $artifactPackingVersion != *SNAPSHOT ]]
  then
    mvnSetSingleProjectVersionToSnapshot $@
  fi
}

function setVersionToSnapshotOneByOne(){
    savedIFS=$IFS
    IFS=','     # hyphen (-) is set as delimiter
    read -rA projectList <<< "$1"   # str is read into an array as tokens separated by IFS
    for project in "${projectList[@]}"; do   # access each element of array
        if [ ! -z "$project" ]
        then
          if [ "$toSnapshot" = true ]
          then
            mvnSetVersionToSnapshotIfNotInSnapShot --projects $project & 
          else  
            mvnSetSingleProjectVersionToRelease --projects $project &
          fi
        fi
    done
    wait
    
    IFS=$savedIFS     # reset to default value after usage
}

function DisplayHelp()
{
   echo "this function can be called with the following options"
   echo
   echo "Syntax: switchModificationProvider [-b|c|h|r]"
   echo "options:"
   echo "a     all changes (b+c)"
   echo "b     modied changes of branch (commited only) "
   echo "c     current changes (not commited)"
   echo "h     Print this Help."
   echo
}

export modificationProvider=gitListNamesOfAllModifiedFiles;
export toSnapshot=true;

function switchModificationProvider(){
  while getopts ":abchr:" option; do
    case $option in
        h) # display Help
          DisplayHelp;
          return 0;;
        a) # all changes
          echo gitListNamesOfAllModifiedFiles;
          export modificationProvider=gitListNamesOfAllModifiedFiles;
          ;;
        b) # modified changes of branch (commited only)
          echo gitListNamesOfFilesModifiedSinceCreationOfCurrentBranch;
          export modificationProvider=gitListNamesOfFilesModifiedSinceCreationOfCurrentBranch;
          ;;
        c) # current changes (not commited)
          echo gitListNamesOfFilesNotYetCommited;
          export modificationProvider=gitListNamesOfFilesNotYetCommited;
          ;;
        \?) # Invalid option
            echo "Error: Invalid option"
            return 1;;
    esac
  done
}



function mvnDiffToSnapshot(){
    if [ -z "$1" ]
    then
        savedListOfModifiedProject=$(listOfModifiedProjects $modificationProvider);
    else
        savedListOfModifiedProject=$1;
    fi

    echo here is the list of projects that have been modified $savedListOfModifiedProject
    if [ -z "$savedListOfModifiedProject" ]
    then
      echo nothing to do: nothing has been modified
    else
      setVersionToSnapshotOneByOne $savedListOfModifiedProject
    fi
}


function rddfsafa() (
  ldfdsvvfdsm() {
    echo inside;
  }
  ldfdsvvfdsm
)


wait_input() {
# read -s -k '?Press any key to continue.'
  # echo "Press enter to continue: ";
}

function doIt(){
  echo I am doin it;
  wait_input;
  savedListOfModifiedProject=$(listOfModifiedProjects $modificationProvider);
  echo here is the list of projects that have been modified $savedListOfModifiedProject
  wait_input;

  if [ -z "$savedListOfModifiedProject" ]
  then
    echo nothing to be done: nothing has been modified
  else
    mvnDiffToSnapshot $savedListOfModifiedProject;
    wait_input;
    
    echo linking modules
    mvnLinkModules ;
    echo linking modules DONE
    wait_input;

    newListOfModifiedProject=$(listOfModifiedProjects $modificationProvider)
    if [[ $newListOfModifiedProject != $savedListOfModifiedProject ]]
    then
      echo modif FIRST : $savedListOfModifiedProject  ------------- $newListOfModifiedProject
      wait_input
      doIt
    else
      echo everything has been set to snapshot sucessfully;
    fi
  fi
}


